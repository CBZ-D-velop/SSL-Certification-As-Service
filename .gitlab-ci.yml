# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
- gitlab-test
- yaml-lint
- ansible-lint
- certifications

variables:
  PIPELINE_SCENARIO_NAME: "gitlabci"

###############################################################################
#################### actions
###############################################################################

# To start, we need to lint role's files with a YML vision
# Because if one of the files doesn't respect YML conventions,
# we dont need to test rest of the pipeline
.yaml_lint: &yaml_lint
  stage: yaml-lint
  image: $NEXUS_ADDRESS/$DOCKER_IMAGE_YAML_LINT
  before_script:
    # Fix weird ansible bug: https://github.com/trailofbits/algo/issues/1637
    # This probably happens due to gitlab-runner mounting the git repo into the container
    - "chmod o-w ."
  script:
    - yamllint -c ./.yamllint .
  allow_failure: false
  retry: 2

.ansible_lint: &ansible_lint
  stage: ansible-lint
  image: $NEXUS_ADDRESS/$DOCKER_IMAGE_ANSIBLE_LINT
  before_script:
    # Fix weird ansible bug: https://github.com/trailofbits/algo/issues/1637
    # This probably happens due to gitlab-runner mounting the git repo into the container
    - "chmod o-w ."
    - "cp .ansible.cfg ~/"
  script:
    - ansible-lint --config=./.ansible-lint --exclude molecule --exclude tests .
  allow_failure: false
  retry: 2

# We will build and run each tools with the input.yml file
.certification: &certification
  stage: certifications
  image: $NEXUS_ADDRESS/$DOCKER_IMAGE_DOCKER_MOLECULE
  script:
    - "cp .ansible.cfg ~/"
    - "echo \"CYPHER_PASS=$GPG_KEY\" > .gpg.key"
    - "echo \"$VAULT_KEY\" > .vault.key"
    - " cd ./bin && ./build && cd .."
    - " cd ./bin && ./uncypher && cd .."
    - " cd $CA_INPUT_FOLDER/$CA"
    - "./run"
  allow_failure: false
  retry: 2

###############################################################################
#################### CI JOBS
###############################################################################

############################################
#### gitlab-test
############################################

# As a GitLab ci, we use the default template :)
sast:
  stage: gitlab-test
include:
- template: Security/SAST.gitlab-ci.yml
  allow_failure: false

############################################
#### lint
############################################

yml_lint:
  <<: *yaml_lint

############################################
#### ansible-lint
############################################

ansible_lint:
  <<: *ansible_lint
  needs:
    - "yml_lint"

############################################
#### certifications
############################################

certification_My-Local-Ansible-Root-CA:
  <<: *certification
  variables:
    CA: "My-Local-Ansible-Root-CA"
  needs:
    - "ansible_lint"

certification_My-Local-Ansible-Intermediate-CA-1:
  <<: *certification
  variables:
    CA: "My-Local-Ansible-Intermediate-CA-1"
  needs:
    - "ansible_lint"

certification_My-Local-Ansible-Intermediate-CA-2:
  <<: *certification
  variables:
    CA: "My-Local-Ansible-Intermediate-CA-2"
  needs:
    - "ansible_lint"

certification_My-Local-Ansible-Service-1-CA:
  <<: *certification
  variables:
    CA: "My-Local-Ansible-Service-1-CA"
  needs:
    - "ansible_lint"
