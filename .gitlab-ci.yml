# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  ANSIBLE_FORCE_COLOR: "true"
  PY_COLORS: "1"
  #
  DOCKER_IMAGE__LINT_ANSIBLE: "labocbz/lint-ansible:latest"
  DOCKER_IMAGE__LINT_YAML: "labocbz/lint-yaml:latest"
  DOCKER_IMAGE__LINT_SECRETS: "labocbz/lint-secrets:latest"
  DOCKER_IMAGE__LINT_MARKDOWN: "labocbz/lint-markdown:latest"
  DOCKER_IMAGE__BUILD_PKI: "labocbz/build-pki:latest"
  DOCKER_IMAGE__RUN_SSH: "labocbz/run-ssh:latest"

image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__RUN_SSH

stages:
  - gitlab-test
  - lint
  - generate
  - publish

###############################################################################
#################### CI JOBS
###############################################################################

############################################
#### gitlab-test
############################################

# As a GitLab ci, we use the default template :)
sast:
  stage: gitlab-test
include:
- template: Security/SAST.gitlab-ci.yml

############################################
#### lint
############################################

lint:yaml:
  stage: lint
  image: $NEXUS_DOCKER_PROXY_REGISTRY/$DOCKER_IMAGE__LINT_YAML
  before_script:
    - "cp .ansible.cfg ~/"
    #
    - "echo \"CYPHER_PASS=${CICD_GPG_KEY}\" > .gpg.key"
    - "echo \"${CICD_ANSIBLE_VAULT_KEY}\" > .vault.key"
    #
    - "cd ./bin && bash ./build && ./uncypher && cd .."
  script:
    - yamllint -c ./.yamllint .
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:ansible:
  stage: lint
  image: $NEXUS_DOCKER_PROXY_REGISTRY/$DOCKER_IMAGE__LINT_ANSIBLE
  before_script:
    - "cp .ansible.cfg ~/"
    #
    - "echo \"CYPHER_PASS=${CICD_GPG_KEY}\" > .gpg.key"
    - "echo \"${CICD_ANSIBLE_VAULT_KEY}\" > .vault.key"
    #
    - "cd ./bin && bash ./build && ./uncypher && cd .."
  script:
    - ansible-lint --config=./.ansible-lint --exclude molecule --exclude tests .
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:secrets:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_SECRETS
  script:
    - "detect-secrets scan"
    - "detect-secrets audit .secrets.baseline"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:markdown:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_MARKDOWN
  script:
    - markdownlint './README.md' --disable MD013
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

############################################
#### Generate
############################################

generate-pipelines:
  stage: generate
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__RUN_SSH
  before_script:
    - "ls -all"
    - "cat ./generate-pipelines > ./local-generate-pipelines"
    - "chmod +x ./local-generate-pipelines"
  script:
    - "./local-generate-pipelines"
    - "ls -all ./.gitlab-ci-generated.yml"
  artifacts:
    paths:
      - "./.gitlab-ci-generated.yml"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

build:publish:
  stage: generate
  needs:
    - "generate-pipelines"
  trigger:
    include:
      - artifact: ".gitlab-ci-generated.yml"
        job: generate-pipelines
    strategy: depend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
